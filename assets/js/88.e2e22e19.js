(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{550:function(v,_,e){"use strict";e.r(_);var c=e(2),o=Object(c.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"vue中的diff算法"}},[_("code",[v._v("vue")]),v._v("中的"),_("code",[v._v("diff")]),v._v("算法")]),v._v(" "),_("ol",[_("li",[_("code",[v._v("vue2")]),v._v("中的"),_("code",[v._v("diff")]),v._v("算法称为"),_("code",[v._v("patching")]),v._v("算法，它由"),_("code",[v._v("Snabbdom")]),v._v("修改而来，虚拟"),_("code",[v._v("DOM")]),v._v("要想转化为真实"),_("code",[v._v("DOM")]),v._v("就需要通过\n"),_("code",[v._v("patch")]),v._v("方法转换。")]),v._v(" "),_("li",[v._v("最初"),_("code",[v._v("Vue1.x")]),v._v("视图中每个依赖均有更新函数对应，可以做到精准更新，因此并不需要虚拟"),_("code",[v._v("DOM")]),v._v("和"),_("code",[v._v("patching")]),v._v("算法支持.但是这样粒度过细导致"),_("code",[v._v("Vue1x")]),v._v("无法承载较大应用;"),_("code",[v._v("Vue2x")]),v._v("中为了降低"),_("code",[v._v("Watcher")]),v._v("粒度.每个组件只有一个 "),_("code",[v._v("Watcher")]),v._v("与之对应，此时就需要引入"),_("code",[v._v("patching")]),v._v("算法才能精确找到发生变化的地方并高效更新。")]),v._v(" "),_("li",[_("code",[v._v("vue")]),v._v("中"),_("code",[v._v("diff")]),v._v("执行的时刻是组件内响应式数据变更触发实例执行其更新函数时，更新函数会再次执行"),_("code",[v._v("render")]),v._v("函数获得最新的虚拟"),_("code",[v._v("DOM")]),v._v(".然后执行"),_("code",[v._v("patch")]),v._v("函数。并传入新旧两次虚拟"),_("code",[v._v("DOM")]),v._v("，通过比对两者找到变化的地方。最后将其转化为对应的"),_("code",[v._v("DOM")]),v._v("操作。")]),v._v(" "),_("li",[_("code",[v._v("patch")]),v._v("过程是一个递归过程，遵循深度优先、同层比较的策略;")])]),v._v(" "),_("p",[v._v("以"),_("code",[v._v("vue3")]),v._v("的"),_("code",[v._v("patch")]),v._v("为例:\n首先判断两个节点是否为相同同类节点，不同则删除重新创建如果双方都是文本则更新文本内容")]),v._v(" "),_("p",[v._v("如果双方都是元素节点则递归更新子元素，同时更新元素属性更新子节点时又分了几种情况:")]),v._v(" "),_("ul",[_("li",[v._v("新的子节点是文本，老的子节点是数组则清空，并设置文本;")]),v._v(" "),_("li",[v._v("新的子节点是文本，老的子节点是文本则直接更新文本;")]),v._v(" "),_("li",[v._v("新的子节点是数组，老的子节点是文本则清空文本，并创建新子节点数组中的子元素;")]),v._v(" "),_("li",[v._v("新的子节点是数组，老的子节点也是数组。那么比较两组子节点，更新细节")])]),v._v(" "),_("ol",{attrs:{start:"5"}},[_("li",[_("code",[v._v("vue3")]),v._v("中引入的更新策略:编译期优化"),_("code",[v._v("patchFlags")]),v._v("、"),_("code",[v._v("block")]),v._v("等")])])])}),[],!1,null,null,null);_.default=o.exports}}]);